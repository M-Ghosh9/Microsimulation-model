// Simulation.h
#ifndef SIMULATION_H
#define SIMULATION_H

#include "Patient.h"
#include "Policy.h"
#include <vector>
#include <memory>

class Simulation {
public:
    Simulation(const std::vector<std::shared_ptr<Patient>>& patients, const std::shared_ptr<Policy>& policy);
    void run();
    void generateReport() const;

private:
    std::vector<std::shared_ptr<Patient>> patients_;
    std::shared_ptr<Policy> policy_;
};

#endif // SIMULATION_H

// Simulation.cpp
#include "Simulation.h"
#include <iostream>
#include <format>
#include <ranges>

Simulation::Simulation(const std::vector<std::shared_ptr<Patient>>& patients, const std::shared_ptr<Policy>& policy)
    : patients_(patients), policy_(policy) {}

void Simulation::run() {
    for (auto& patient : patients_) {
        policy_->apply(*patient);
    }
}

void Simulation::generateReport() const {
    for (const auto& patient : patients_ | std::views::transform([](auto p) { return p->getHealthScore(); })) {
        std::cout << std::format("Patient Health Score: {:.2f}\n", patient);
    }
}
