// Patient.h
#ifndef PATIENT_H
#define PATIENT_H

#include <string>
#include <memory>

class Treatment; // Forward declaration

class Patient {
public:
    Patient(int id, const std::string& name, int age);
    void applyTreatment(const Treatment& treatment);
    double getHealthScore() const;

private:
    int id_;
    std::string name_;
    int age_;
    double healthScore_; // A metric representing patient health
};

#endif // PATIENT_H

// Treatment.h
#ifndef TREATMENT_H
#define TREATMENT_H

#include <string>

class Treatment {
public:
    Treatment(const std::string& name, double efficacy);
    double getEfficacy() const;

private:
    std::string name_;
    double efficacy_;
};

#endif // TREATMENT_H

// Policy.h
#ifndef POLICY_H
#define POLICY_H

class Patient;

class Policy {
public:
    virtual void apply(Patient& patient) const = 0;
    virtual ~Policy() = default;
};

class StandardPolicy : public Policy {
public:
    void apply(Patient& patient) const override;
};

class AggressivePolicy : public Policy {
public:
    void apply(Patient& patient) const override;
};

#endif // POLICY_H
